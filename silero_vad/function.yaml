kind: job
metadata:
  name: silero-vad
  tag: ''
  hash: 91c431213c8b73fff2f8f02f4ddbb51058aeca27
  project: ''
  labels:
    author: guyl
  categories:
  - Deep Learning
  - PyTorch
  - Audio
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - torch
    - torchaudio
    - tqdm
  entry_points:
    audio_file:
      name: audio_file
      doc: Get the audio file of the task.
      parameters:
      - name: self
      outputs:
      - doc: The audio file of the task.
        type: Path
        default: ''
      lineno: 43
    do_task:
      name: do_task
      doc: Do the task on the given speech timestamps. The task will diarize the VAD
        speech timestamps into speakers.
      parameters:
      - name: self
      - name: speech_timestamps
        type: List[List[Dict[str, int]]]
        doc: The speech timestamps per channel to do the task on as outputted from
          the VAD.
      outputs:
      - default: ''
      lineno: 86
    get_result:
      name: get_result
      doc: Get the result of the task. A tuple of the audio file name and the result.
      parameters:
      - name: self
      outputs:
      - doc: The result of the task.
        default: ''
      lineno: 61
    create_task:
      name: create_task
      doc: Create a task with the given audio file.
      parameters:
      - name: self
      - name: audio_file
        type: Path
        doc: The audio file to assign to the task.
      outputs:
      - doc: The created task.
        default: ''
      lineno: 123
    load:
      name: load
      doc: Load the VAD model.
      parameters:
      - name: self
      outputs:
      - default: ''
      lineno: 199
    detect_voice:
      name: detect_voice
      doc: "Perform voice activity detection on given audio files using the silero\
        \ VAD model -\nhttps://github.com/snakers4/silero-vad. The end result is a\
        \ dictionary with the file names as keys and their\nVAD timestamps dictionaries\
        \ as value.\n\nFor example::\n\n    {\n        \"file_1.wav\": [\n       \
        \     {\"start\": 0, \"end\": 16000},\n            {\"start\": 16000, \"end\"\
        : 32000},\n            {\"start\": 32000, \"end\": 48000},\n            ...\n\
        \        ],\n        \"file_2.wav\": [\n            {\"start\": 0, \"end\"\
        : 16000},\n            {\"start\": 16000, \"end\": 32000},\n            {\"\
        start\": 32000, \"end\": 48000},\n            ...\n        ],\n        ...\n\
        \    }"
      parameters:
      - name: data_path
        type: Union[str, Path, List[Union[str, Path]]]
        doc: The path to the audio files to diarize. Can be a path to a single file,
          a path to a directory or a list of paths to files.
      - name: use_onnx
        type: bool
        doc: Whether to use ONNX for inference. Default is True.
        default: true
      - name: force_onnx_cpu
        type: bool
        doc: Whether to force ONNX to use CPU for inference. Default is True.
        default: true
      - name: threshold
        type: float
        doc: Speech threshold. Silero VAD outputs speech probabilities for each audio
          chunk, probabilities ABOVE this value are considered as SPEECH. It is better
          to tune this parameter for each dataset separately, but "lazy" 0.5 is pretty
          good for most datasets.
        default: 0.5
      - name: sampling_rate
        type: int
        doc: Currently, silero VAD models support 8000 and 16000 sample rates.
        default: 16000
      - name: min_speech_duration_ms
        type: int
        doc: Final speech chunks shorter min_speech_duration_ms are thrown out.
        default: 250
      - name: max_speech_duration_s
        type: float
        doc: Maximum duration of speech chunks in seconds. Chunks longer than `max_speech_duration_s`
          will be split at the timestamp of the last silence that lasts more than
          100ms (if any), to prevent aggressive cutting. Otherwise, they will be split
          aggressively just before max_speech_duration_s.
        default: float('inf')
      - name: min_silence_duration_ms
        type: int
        doc: In the end of each speech chunk wait for min_silence_duration_ms before
          separating it.
        default: 100
      - name: window_size_samples
        type: int
        doc: Audio chunks of window_size_samples size are fed to the silero VAD model.
        default: 512
      - name: speech_pad_ms
        type: int
        doc: Final speech chunks are padded by speech_pad_ms each side.
        default: 30
      - name: return_seconds
        type: bool
        doc: Whether return timestamps in seconds. False means to return timestamps
          in samples (default - False).
        default: false
      - name: per_channel
        type: bool
        doc: Whether to return timestamps per channel (default - False). This will
          run VAD on each channel separately and return a list of timestamps per channel.
        default: false
      - name: use_multiprocessing
        type: int
        doc: The number of workers to use for multiprocessing. If 0, no multiprocessing
          will be used. Default is 0.
        default: 0
      - name: verbose
        type: bool
        doc: Verbosity.
        default: false
      outputs:
      - default: ''
      lineno: 347
    diarize:
      name: diarize
      doc: "Perform speech diarization on given audio files using the silero VAD model\
        \ - https://github.com/snakers4/silero-vad.\nThe speech diarization is performed\
        \ per channel so that each channel in the audio belong to a different speaker.\
        \ The\nend result is a dictionary with the file names as keys and their diarization\
        \ as value. A diarization is a list\nof tuples: (start, end, speaker_label).\n\
        \nFor example::\n\n    {\n        \"file_1.wav\": [\n            (0.0, 1.0,\
        \ \"speaker_0\"),\n            (1.0, 2.0, \"speaker_1\"),\n            (2.0,\
        \ 3.0, \"speaker_0\"),\n            ...\n        ],\n        \"file_2.wav\"\
        : [\n            (0.0, 1.0, \"speaker_0\"),\n            (1.0, 2.0, \"speaker_1\"\
        ),\n            (2.0, 3.0, \"speaker_0\"),\n            ...\n        ],\n\
        \        ...\n    }"
      parameters:
      - name: data_path
        type: Union[str, Path, List[Union[str, Path]]]
        doc: The path to the audio files to diarize. Can be a path to a single file,
          a path to a directory or a list of paths to files.
      - name: use_onnx
        type: bool
        doc: Whether to use ONNX for inference. Default is True.
        default: true
      - name: force_onnx_cpu
        type: bool
        doc: Whether to force ONNX to use CPU for inference. Default is True.
        default: true
      - name: threshold
        type: float
        doc: Speech threshold. Silero VAD outputs speech probabilities for each audio
          chunk, probabilities ABOVE this value are considered as SPEECH. It is better
          to tune this parameter for each dataset separately, but "lazy" 0.5 is pretty
          good for most datasets.
        default: 0.5
      - name: sampling_rate
        type: int
        doc: Currently, silero VAD models support 8000 and 16000 sample rates.
        default: 16000
      - name: min_speech_duration_ms
        type: int
        doc: Final speech chunks shorter min_speech_duration_ms are thrown out.
        default: 250
      - name: max_speech_duration_s
        type: float
        doc: Maximum duration of speech chunks in seconds. Chunks longer than `max_speech_duration_s`
          will be split at the timestamp of the last silence that lasts more than
          100ms (if any), to prevent aggressive cutting. Otherwise, they will be split
          aggressively just before max_speech_duration_s.
        default: float('inf')
      - name: min_silence_duration_ms
        type: int
        doc: In the end of each speech chunk wait for min_silence_duration_ms before
          separating it.
        default: 100
      - name: window_size_samples
        type: int
        doc: Audio chunks of window_size_samples size are fed to the silero VAD model.
        default: 512
      - name: speech_pad_ms
        type: int
        doc: Final speech chunks are padded by speech_pad_ms each side.
        default: 30
      - name: speaker_labels
        type: List[str]
        doc: The speaker labels to use for the diarization. If not given, the speakers
          will be named "speaker_0", "speaker_1", etc.
        default: null
      - name: use_multiprocessing
        type: int
        doc: The number of workers to use for multiprocessing. If 0, no multiprocessing
          will be used. Default is 0.
        default: 0
      - name: verbose
        type: bool
        doc: Verbosity.
        default: false
      outputs:
      - default: ''
      lineno: 471
  description: Silero VAD (Voice Activity Detection) functions.
  default_handler: detect_voice
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
